use option::TelnetOption;
use negotiation::NegotiationAction;

///
/// Events generated by `Telnet`.
///
#[derive(Debug, PartialEq, Eq)]
pub enum Event<'a> {
    /// Data received (excluding telnet commands)
    Data(&'a [u8]),
    /// An unrecognized telnet command received
    UnknownIAC(u8),
    /// A telnet negotiation received
    Negotiation(NegotiationAction, TelnetOption),
    /// A telnet subnegotiation data received
    Subnegotiation(TelnetOption, Box<[u8]>),
    /// Error encountered during processing read buffer
    Error(String)
}

pub struct Events<'a>(std::vec::IntoIter<Event<'a>>);

impl<'a> From<Vec<Event<'a>>> for Events<'a> {
    fn from(events: Vec<Event<'a>>) -> Self {
        Self(events.into_iter())
    }
}

impl<'a> Iterator for Events<'a> {
    type Item = Event<'a>;

    fn next(&mut self) -> Option<Self::Item> {
        self.0.next()
    }
}
